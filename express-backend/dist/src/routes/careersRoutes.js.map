{"version":3,"sources":["../../../src/routes/careersRoutes.ts"],"sourcesContent":["import { Router } from 'express';\r\nimport multer from 'multer';\r\nimport { sendEmail } from '../services/emailService.js';\r\nimport { RecaptchaResponse } from '../types/recaptchaResponse.js';\r\n\r\nconst router = Router();\r\nconst upload = multer({ dest: 'uploads/' });\r\n\r\n// careers prefix set in server.ts\r\nrouter.post('/', upload.single('resume'), async (req, res) => {\r\n\tconst { recaptchaResponse, name, email, phoneNumber, skills, message } = req.body;\r\n\tconst file = req.file; // file could be undefined\r\n\tif (!file) {\r\n\t\treturn res.status(400).send('Resume file is required.');\r\n\t}\r\n\t// Verify recaptchaResponse with google's api\r\n\tconst verifyURL = `https://www.google.com/recaptcha/api/siteverify?secret=${process.env.RECAPTCHA_SECRET_KEY}&response=${recaptchaResponse}`;\r\n\r\n\ttry {\r\n\t\tconst response = await fetch(verifyURL, { method: 'POST' });\r\n\t\tconst data = await response.json() as RecaptchaResponse; // Not strict\r\n\r\n\t\tif (!data.success) {\r\n\t\t\treturn res.status(400).send('reCAPTCHA verification failed');\r\n\t\t}\r\n\r\n\t\tconst emailResult = await sendEmail({\r\n\t\t\tfrom: email,\r\n\t\t\tto: process.env.RECEIVER_EMAIL_CAREERS!,\r\n\t\t\tsubject: \"Website Career Inquiry\",\r\n\t\t\ttext: `Name: ${name}\\nEmail: ${email}\\nPhone Number: ${phoneNumber}\\nSkills: \\n${skills}\\nMessage: \\n${message}`,\r\n\t\t\tattachments: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfilename: file.originalname,\r\n\t\t\t\t\t\tpath: file.path,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t});\r\n\r\n\t\tif (emailResult.success) {\r\n\t\t\tres.send(emailResult.message);\r\n\t\t} else {\r\n\t\t\tres.status(500).send(emailResult.message);\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tconsole.error('Failed to submit form:', error);\r\n\t\tres.status(500).send('Server error');\r\n\t}\r\n});\r\n\r\nexport default router;"],"names":["Router","multer","sendEmail","router","upload","dest","post","single","req","res","recaptchaResponse","name","email","phoneNumber","skills","message","body","file","status","send","verifyURL","process","env","RECAPTCHA_SECRET_KEY","response","fetch","method","data","json","success","emailResult","from","to","RECEIVER_EMAIL_CAREERS","subject","text","attachments","filename","originalname","path","error","console"],"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AACjC,OAAOC,YAAY,SAAS;AAC5B,SAASC,SAAS,QAAQ,8BAA8B;AAGxD,MAAMC,SAASH;AACf,MAAMI,SAASH,OAAO;IAAEI,MAAM;AAAW;AAEzC,kCAAkC;AAClCF,OAAOG,IAAI,CAAC,KAAKF,OAAOG,MAAM,CAAC,WAAW,OAAOC,KAAKC;IACrD,MAAM,EAAEC,iBAAiB,EAAEC,IAAI,EAAEC,KAAK,EAAEC,WAAW,EAAEC,MAAM,EAAEC,OAAO,EAAE,GAAGP,IAAIQ,IAAI;IACjF,MAAMC,OAAOT,IAAIS,IAAI,EAAE,0BAA0B;IACjD,IAAI,CAACA,MAAM;QACV,OAAOR,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAAC;IAC7B;IACA,6CAA6C;IAC7C,MAAMC,YAAY,CAAC,uDAAuD,EAAEC,QAAQC,GAAG,CAACC,oBAAoB,CAAC,UAAU,EAAEb,kBAAkB,CAAC;IAE5I,IAAI;QACH,MAAMc,WAAW,MAAMC,MAAML,WAAW;YAAEM,QAAQ;QAAO;QACzD,MAAMC,OAAO,MAAMH,SAASI,IAAI,IAAyB,aAAa;QAEtE,IAAI,CAACD,KAAKE,OAAO,EAAE;YAClB,OAAOpB,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAAC;QAC7B;QAEA,MAAMW,cAAc,MAAM5B,UAAU;YACnC6B,MAAMnB;YACNoB,IAAIX,QAAQC,GAAG,CAACW,sBAAsB;YACtCC,SAAS;YACTC,MAAM,CAAC,MAAM,EAAExB,KAAK,SAAS,EAAEC,MAAM,gBAAgB,EAAEC,YAAY,YAAY,EAAEC,OAAO,aAAa,EAAEC,QAAQ,CAAC;YAChHqB,aAAa;gBACX;oBACCC,UAAUpB,KAAKqB,YAAY;oBAC3BC,MAAMtB,KAAKsB,IAAI;gBAChB;aACA;QACH;QAEA,IAAIT,YAAYD,OAAO,EAAE;YACxBpB,IAAIU,IAAI,CAACW,YAAYf,OAAO;QAC7B,OAAO;YACNN,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAACW,YAAYf,OAAO;QACzC;IACD,EAAE,OAAOyB,OAAO;QACfC,QAAQD,KAAK,CAAC,0BAA0BA;QACxC/B,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAAC;IACtB;AACD;AAEA,eAAehB,OAAO"}